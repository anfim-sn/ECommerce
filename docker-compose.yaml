version: '3.8'
name: ecommerce
services:
  postgres:
    image: postgres:15.6
    ports:
      - "5432:5432"
    volumes:
      - ./local/postgresql:/var/lib/postgresql/data
      - ./local/postgresql/init:/docker-entrypoint-initdb.d
    environment:
      PGDATA: /var/lib/postgresql/data/ecommerce/
      POSTGRES_DB: ecommerce
      POSTGRES_USER: db
      POSTGRES_PASSWORD: 1234
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U db -d ecommerce" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - ./local/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - ecommerce

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
        - ./local/redis-cache:/data
    networks:
      - ecommerce
  
  rabbit:
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
        RABBITMQ_DEFAULT_USER: user
        RABBITMQ_DEFAULT_PASS: 1234
    networks:
        - ecommerce
  
  apigateway:
    image: apigateway
    build:
        context: ./src/ECommerce.OrderService
        dockerfile: ApiGateway/Dockerfile
    ports:
        - "5001:8080"
    networks:
        - ecommerce
  
  product-service:
    image: anfim/ecommerce-products:v1.0
#    build:
#        context: ./src/ECommerce.ProductService
#        dockerfile: ECommerce.Api/Dockerfile
    ports:
      - "8000:8080"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: ecommerce
      POSTGRES_USERNAME: db
      POSTGRES_PASSWORD: 1234
      RabbitMQ_HostName: rabbit
      RabbitMQ_Port: 5672
      RabbitMQ_UserName: user
      RabbitMQ_Password: 1234
      RabbitMQ_Products_Exchange: products.exchange
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce
  
  user-service:
    image: anfim/ecommerce-users:v1.1
#    build:
#        context: ./src/ECommerce.UserService
#        dockerfile: ECommerce.Api/Dockerfile
    ports:
      - "9000:9090"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: ecommerce
      POSTGRES_USERNAME: db
      POSTGRES_PASSWORD: 1234
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce

  order-service:
    image: order-service
    build:
        context: ./src/ECommerce.OrderService
        dockerfile: ECommerce.Api/Dockerfile
    ports:
      - "4000:7070"
    environment:
      MONGODB_HOST: mongo
      MONGODB_PORT: 27017
      MONGODB_DATABASE: OrdersDatabase
      REDIS_HOST: redis
      REDIS_PORT: 6379
      UsersMicroserviceName: apigateway
      UsersMicroservicePort: 8080
      ProductsMicroserviceName: apigateway
      ProductsMicroservicePort: 8080
      RabbitMQ_HostName: rabbit
      RabbitMQ_Port: 5672
      RabbitMQ_UserName: user
      RabbitMQ_Password: 1234
      RabbitMQ_Products_Exchange: products.exchange
    depends_on:
      - mongo
      - rabbit
    networks:
        - ecommerce

networks:
  ecommerce:
    driver: bridge